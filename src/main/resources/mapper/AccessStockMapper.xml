<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.graduate.dao.AccessStockMapper" >
  <resultMap id="BaseResultMap" type="com.graduate.model.AccessStock" >
    <constructor >
      <idArg column="id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="single_no" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="s_type" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <arg column="hc_no" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="hc_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="unit" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <arg column="price" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="number" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="amount" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="valid_date" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="in_or_out" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="modified_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, single_no, s_type, hc_no, number, amount, valid_date, in_or_out, create_time, 
    modified_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.graduate.model.AccessStockExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from access_stock
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByMap" parameterType="java.util.Map" resultMap="BaseResultMap">
    select a.*, s.hc_name, s.unit, s.price from access_stock a join supplies s on a.hc_no = s.hc_no
    where 1 = 1
    <if test="map.hcName != null"> and s.hc_name = #{map.hcName}</if>
    <if test="map.startDate != null"> and a.create_time &gt; #{map.startDate}</if>
    <if test="map.endDate != null"> and a.create_time &lt; #{map.endDate}</if>
    <if test="map.sType != null"> and a.s_type = #{map.sType}</if>
    order by a.modified_time desc
    <if test="map.startIndex != null">
      limit #{map.startIndex},#{map.pageSize}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from access_stock
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from access_stock
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.graduate.model.AccessStockExample" >
    delete from access_stock
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.graduate.model.AccessStock" >
    insert into access_stock (id, single_no, s_type, 
      hc_no, number, amount, 
      valid_date, in_or_out, create_time, 
      modified_time)
    values (#{id,jdbcType=BIGINT}, #{singleNo,jdbcType=VARCHAR}, #{sType,jdbcType=TINYINT}, 
      #{hcNo,jdbcType=VARCHAR}, #{number,jdbcType=INTEGER}, #{amount,jdbcType=DECIMAL}, 
      #{validDate,jdbcType=VARCHAR}, #{inOrOut,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, 
      #{modifiedTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.graduate.model.AccessStock" >
    insert into access_stock
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="singleNo != null" >
        single_no,
      </if>
      <if test="sType != null" >
        s_type,
      </if>
      <if test="hcNo != null" >
        hc_no,
      </if>
      <if test="number != null" >
        number,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="validDate != null" >
        valid_date,
      </if>
      <if test="inOrOut != null" >
        in_or_out,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="modifiedTime != null" >
        modified_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="singleNo != null" >
        #{singleNo,jdbcType=VARCHAR},
      </if>
      <if test="sType != null" >
        #{sType,jdbcType=TINYINT},
      </if>
      <if test="hcNo != null" >
        #{hcNo,jdbcType=VARCHAR},
      </if>
      <if test="number != null" >
        #{number,jdbcType=INTEGER},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="validDate != null" >
        #{validDate,jdbcType=VARCHAR},
      </if>
      <if test="inOrOut != null" >
        #{inOrOut,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifiedTime != null" >
        #{modifiedTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.graduate.model.AccessStockExample" resultType="java.lang.Integer" >
    select count(*) from access_stock
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="countByMap" parameterType="java.util.Map" resultType="java.lang.Integer">
    select count(*) from access_stock a join supplies s on a.hc_no = s.hc_no
    where 1 = 1
    <if test="map.hcName != null"> and s.hc_name = #{map.hcName}</if>
    <if test="map.startDate != null"> and a.create_time &gt; #{map.startDate}</if>
    <if test="map.endDate != null"> and a.create_time &lt; #{map.endDate}</if>
    <if test="map.sType != null"> and a.s_type = #{map.sType}</if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update access_stock
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.singleNo != null" >
        single_no = #{record.singleNo,jdbcType=VARCHAR},
      </if>
      <if test="record.sType != null" >
        s_type = #{record.sType,jdbcType=TINYINT},
      </if>
      <if test="record.hcNo != null" >
        hc_no = #{record.hcNo,jdbcType=VARCHAR},
      </if>
      <if test="record.number != null" >
        number = #{record.number,jdbcType=INTEGER},
      </if>
      <if test="record.amount != null" >
        amount = #{record.amount,jdbcType=DECIMAL},
      </if>
      <if test="record.validDate != null" >
        valid_date = #{record.validDate,jdbcType=VARCHAR},
      </if>
      <if test="record.inOrOut != null" >
        in_or_out = #{record.inOrOut,jdbcType=TINYINT},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.modifiedTime != null" >
        modified_time = #{record.modifiedTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update access_stock
    set id = #{record.id,jdbcType=BIGINT},
      single_no = #{record.singleNo,jdbcType=VARCHAR},
      s_type = #{record.sType,jdbcType=TINYINT},
      hc_no = #{record.hcNo,jdbcType=VARCHAR},
      number = #{record.number,jdbcType=INTEGER},
      amount = #{record.amount,jdbcType=DECIMAL},
      valid_date = #{record.validDate,jdbcType=VARCHAR},
      in_or_out = #{record.inOrOut,jdbcType=TINYINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      modified_time = #{record.modifiedTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.graduate.model.AccessStock" >
    update access_stock
    <set >
      <if test="singleNo != null" >
        single_no = #{singleNo,jdbcType=VARCHAR},
      </if>
      <if test="sType != null" >
        s_type = #{sType,jdbcType=TINYINT},
      </if>
      <if test="hcNo != null" >
        hc_no = #{hcNo,jdbcType=VARCHAR},
      </if>
      <if test="number != null" >
        number = #{number,jdbcType=INTEGER},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="validDate != null" >
        valid_date = #{validDate,jdbcType=VARCHAR},
      </if>
      <if test="inOrOut != null" >
        in_or_out = #{inOrOut,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifiedTime != null" >
        modified_time = #{modifiedTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.graduate.model.AccessStock" >
    update access_stock
    set single_no = #{singleNo,jdbcType=VARCHAR},
      s_type = #{sType,jdbcType=TINYINT},
      hc_no = #{hcNo,jdbcType=VARCHAR},
      number = #{number,jdbcType=INTEGER},
      amount = #{amount,jdbcType=DECIMAL},
      valid_date = #{validDate,jdbcType=VARCHAR},
      in_or_out = #{inOrOut,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      modified_time = #{modifiedTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>